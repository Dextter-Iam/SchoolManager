@model IEnumerable<MVCCamiloMentoria.ViewModels.EquipamentoViewModel>

<div class="container-fluid">
    <p></p>
    <div class="card shadow-sm mb-5">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-4">Equipamentos Cadastrados</h4>
        </div>
        <div class="card-body">
            <table id ="equipamentosTable" class="table table-bordered table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th class="sortable-column" data-column="0">@Html.DisplayNameFor(model => model.Nome)</th>
                        <th class="sortable-column" data column = "1"> @Html.DisplayNameFor(model => model.StatusOperacional)</th>
                        <th class="sortable-column" data-column = "2" >@Html.DisplayNameFor(model => model.Marca)</th>
                        <th class="sortable-column" data-column="3">@Html.DisplayNameFor(model => model.Modelo)</th>
                        <th class="sortable-column" data-column="4">@Html.DisplayNameFor(model => model.Escola)</th>
                        <th class="text-center">Ações</th>
                    </tr>
                    <tr>
                        <th><input type="text" class="form-control form-control-sm column-filter" data-column="0" placeholder="Filtrar..." /></th>
                        <th></th>
                        <th><input type="text" class="form-control form-control-sm column-filter" data-column="2" placeholder="Filtrar..." /></th>
                        <th><input type="text" class="form-control form-control-sm column-filter" data-column="3" placeholder="Filtrar..." /></th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Nome)</td>
                            <td>
                                @(item.StatusOperacional ? "Operacional" : "Inoperante")
                            </td>
                            <td>@item.Marca?.Nome</td>
                            <td>@item.Modelo?.Descricao</td>
                            <td>@item.Escola?.Nome</td>
                            <td class="text-center">

                                <div class="d-flex justify-content-center">
                                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm mx-2">
                                        <i class="fas fa-eye"></i> Detalhes
                                    </a>
                                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm mx-2">
                                        <i class="fas fa-edit"></i> Editar
                                    </a>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm mx-2">
                                        <i class="fas fa-trash"></i> Excluir
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card shadow-sm mt-3">
            <nav aria-label="Paginação" class="mt-4">
                <ul class="pagination justify-content-center mb-0">
                    @if (ViewBag.PaginaAtual > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { pagina = ViewBag.PaginaAtual - 1 })">Anterior</a>
                        </li>
                    }

                    @for (int i = 1; i <= ViewBag.TotalPaginas; i++)
                    {
                        <li class="page-item @(i == ViewBag.PaginaAtual ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { pagina = i })">@i</a>
                        </li>
                    }

                    @if (ViewBag.PaginaAtual < ViewBag.TotalPaginas)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { pagina = ViewBag.PaginaAtual + 1 })">Próxima</a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            const sortDirection = {};

            $('.sortable-column').each(function () {
                const colIndex = $(this).data('column');
                if (colIndex !== undefined) {
                    sortDirection[colIndex] = 1;
                    $(this).append(' <i class="fas fa-sort"></i>');
                }
            });

            $('.column-filter').on('keyup', function () {
                const columnIndex = $(this).data('column');
                const searchText = $(this).val().toLowerCase();

                $('#equipamentosTable tbody tr').each(function () {
                    const cellText = $(this).find('td').eq(columnIndex).text().toLowerCase();
                    const match = cellText.includes(searchText);
                    $(this).toggle(match);
                });
            });

            $('.sortable-column').on('click', function () {
                const columnIndex = $(this).data('column');
                if (columnIndex === undefined) return;

                sortDirection[columnIndex] *= -1;

                $('.sortable-column i').removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');

                const icon = $(this).find('i');
                icon.removeClass('fa-sort');
                icon.addClass(sortDirection[columnIndex] === 1 ? 'fa-sort-up' : 'fa-sort-down');

                sortTable(columnIndex, sortDirection[columnIndex]);
            });

            function sortTable(columnIndex, direction) {
                const rows = $('#equipamentosTable tbody tr').get();

                rows.sort(function (a, b) {
                    const aText = $(a).find('td').eq(columnIndex).text().toLowerCase();
                    const bText = $(b).find('td').eq(columnIndex).text().toLowerCase();
                    return aText.localeCompare(bText) * direction;
                });

                $.each(rows, function (index, row) {
                    $('#equipamentosTable tbody').append(row);
                });
            }
        });
    </script>
}

<style>
    .card {
        border-radius: 0.25rem;
    }

    .card-header {
        padding: 1rem 1.5rem;
    }

    .table {
        margin-bottom: 0;
    }

        .table thead th {
            vertical-align: middle;
            background-color: #343a40;
            color: white;
        }

    .table-bordered {
        border: 1px solid #dee2e6;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.075);
    }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }

    .column-filter {
        max-width: 150px;
        margin: 0 auto;
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
        border-radius: 0.2rem;
        border: 1px solid #ced4da;
    }

    .sortable-column {
        cursor: pointer;
        position: relative;
    }

        .sortable-column:hover {
            background-color: rgba(13, 110, 253, 1);
        }

    .fa-sort, .fa-sort-up, .fa-sort-down {
        margin-left: 5px;
    }

    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    .page-link {
        color: #007bff;
    }
</style>