@model IEnumerable<MVCCamiloMentoria.ViewModels.ResponsavelViewModel>

@{
    ViewData["Title"] = "Responsáveis Cadastrados";
}

<div class="card shadow-sm mb-5">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h4 class="mb-0">Responsáveis Cadastrados</h4>
        <form asp-action="Index" method="get" class="d-flex w-100 w-md-auto" style="max-width: 720px;">
            <input type="text" name="FiltroGeral" class="form-control form-control-md me-2" placeholder="Pesquisar por nome" />
            <button type="submit" class="btn btn-light btn-md text-primary">🔍 Pesquisar</button>
        </form>
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info m-3 text-center">
            Nenhum responsável cadastrado.
        </div>
    }
    else
    {
        <table id="responsavelTable" class="table table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th class="sortable-column" data-column="0">Nome</th>
                    <th class="sortable-column" data-column="1">Endereço</th>
                    <th>Aluno(s)</th>
                    <th class="text-center">Ações</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@item.Nome</td>
                        <td>@item.Endereco?.NomeRua</td>
                        <td class="text-center">
                            @if (item.AlunoResponsavel != null && item.AlunoResponsavel.Count() > 1)
                            {
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-outline-primary btn-sm" title="Ver alunos">
                                    <i class="fas fa-users"></i>
                                </a>
                            }
                            else if (item.AlunoResponsavel != null && item.AlunoResponsavel.Count() == 1)
                            {
                                <i class="fas fa-user text-muted" title="1 aluno vinculado"></i>
                            }
                            else
                            {
                                <span class="text-muted">Nenhum aluno</span>
                            }
                        </td>

                        <td class="d-flex justify-content-around">
                            <div class="d-flex justify-content-center gap-2">
                                <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-info btn-sm px-3" title="Detalhes">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-warning btn-sm px-3" title="Editar">
                                    <i class="fas fa-pencil-alt"></i>
                                </a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-sm px-3" title="Excluir">
                                    <i class="fas fa-trash-alt"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<div class="card-shadpw">
    <br />
    <nav aria-label="Paginação">
        <ul class="pagination justify-content-center">
            @if (ViewBag.PaginaAtual > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { pagina = ViewBag.PaginaAtual - 1 })">Anterior</a>
                </li>
            }

            @for (int i = 1; i <= ViewBag.TotalPaginas; i++)
            {
                <li class="page-item @(i == ViewBag.PaginaAtual ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { pagina = i })">@i</a>
                </li>
            }

            @if (ViewBag.PaginaAtual < ViewBag.TotalPaginas)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { pagina = ViewBag.PaginaAtual + 1 })">Próxima</a>
                </li>
            }
        </ul>
    </nav>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            let sortDirection = {};


            $('.sortable-column').each(function () {
                const colIndex = $(this).data('column');
                sortDirection[colIndex] = 1;
                $(this).append(' <i class="fas fa-sort"></i>');
            });

            $('.column-filter').on('keyup', function () {
                const columnIndex = $(this).data('column');
                const searchText = $(this).val().toLowerCase();

                $('#responsavelTable tbody tr').filter(function () {
                    const cellText = $(this).find('td').eq(columnIndex).text().toLowerCase();
                    $(this).toggle(cellText.includes(searchText));
                });
            });

            $('.sortable-column').on('click', function () {
                const columnIndex = $(this).data('column');
                sortDirection[columnIndex] *= -1;

                $('.sortable-column i').removeClass('fa-sort-up fa-sort-down').addClass('fa-sort');
                const sortIcon = $(this).find('i');
                sortIcon.removeClass('fa-sort');
                sortIcon.addClass(sortDirection[columnIndex] === 1 ? 'fa-sort-up' : 'fa-sort-down');

                sortTable(columnIndex, sortDirection[columnIndex]);
            });


            function sortTable(columnIndex, direction) {
                const $table = $('#responsavelTable');
                const $rows = $table.find('tbody tr').get();

                $rows.sort(function (a, b) {
                    const aText = $(a).find('td').eq(columnIndex).text().trim();
                    const bText = $(b).find('td').eq(columnIndex).text().trim();


                    if (columnIndex === 1) {
                        return aText.localeCompare(bText) * direction;
                    }


                    if (columnIndex === 2) {
                        const aHasAlunos = aText.includes('aluno');
                        const bHasAlunos = bText.includes('aluno');
                        return (aHasAlunos - bHasAlunos) * direction;
                    }


                    return aText.localeCompare(bText) * direction;
                });

                $.each($rows, function (index, row) {
                    $table.children('tbody').append(row);
                });
            }
        });
    </script>
}
<style>
    .sortable-column {
        cursor: pointer;
        transition: background-color 0.2s;
    }

        .sortable-column:hover {
            background-color: rgba(13, 110, 253, 1);
        }

    .fa-sort, .fa-sort-up, .fa-sort-down {
        margin-left: 5px;
        font-size: 0.8rem;
        opacity: 0.7;
    }

    .sortable-column:hover .fa-sort {
        opacity: 1;
    }
</style>